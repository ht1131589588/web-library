(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{300:function(t,a,s){"use strict";s.r(a);var e=s(28),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),s("p",[t._v("JavaScript 定义了 8 种内建类型：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("undefined")])]),t._v(" "),s("li",[s("code",[t._v("boolean")])]),t._v(" "),s("li",[s("code",[t._v("number")])]),t._v(" "),s("li",[s("code",[t._v("object")])]),t._v(" "),s("li",[s("code",[t._v("symbol")]),t._v(" -- 在 es6 中被加入")]),t._v(" "),s("li",[s("code",[t._v("bigint")]),t._v(" -- es6+ 被加入")])]),t._v(" "),s("p",[t._v("注意点：")]),t._v(" "),s("ul",[s("li",[t._v("在 JS 中，变量是没有类型的，值才有类型。变量可以在任何时候，持有任何值")])]),t._v(" "),s("h2",{attrs:{id:"原始类型（基本类型）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原始类型（基本类型）","aria-hidden":"true"}},[t._v("#")]),t._v(" 原始类型（基本类型）")]),t._v(" "),s("p",[t._v("在 js 中，除了 "),s("code",[t._v("object")]),t._v(" 都是原始类型，存在 7 种原始值，分别是：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("boolean")])]),t._v(" "),s("li",[s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("undefined")])]),t._v(" "),s("li",[s("code",[t._v("number")])]),t._v(" "),s("li",[s("code",[t._v("string")])]),t._v(" "),s("li",[s("code",[t._v("symbol")])]),t._v(" "),s("li",[s("code",[t._v("bigint")])])]),t._v(" "),s("p",[t._v("原始类型存储的都是值，是没有函数可以调用的，比如"),s("code",[t._v("undefined.toString()")]),t._v("会直接报错。\n注意点：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("'1'.toString()")]),t._v("或者"),s("code",[t._v("false.toString()")]),t._v("等可以用的原因是被强制转换成了 String 类型也就是对象类型，所以可以调用 "),s("code",[t._v("toString")]),t._v(" 函数。")]),t._v(" "),s("li",[t._v("对于"),s("code",[t._v("null")]),t._v("来说，很多人会认为它是个对象类型，其实是错误的。"),s("code",[t._v("typeof null")]),t._v(" 会输出 "),s("code",[t._v("object")]),t._v("，这只是 JS 存在的一个悠久 Bug，而且好像永远不会也不会被修复，因为有太多已经存在的 web 的内容依存着这个 bug。注: 在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，"),s("code",[t._v("000")]),t._v("开头代表是对象，然而 "),s("code",[t._v("null")]),t._v(" 表示为全零，所以将它错误的判断为 "),s("code",[t._v("object")]),t._v(" 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。")])]),t._v(" "),s("h2",{attrs:{id:"对象类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象类型")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("除了原始类型，其他的都是对象类型。\n")])])]),s("p",[t._v("对象类型和原始类型不同的是，原始类型存储的是值，对象类型存储的是地址。")]),t._v(" "),s("h3",{attrs:{id:"array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array","aria-hidden":"true"}},[t._v("#")]),t._v(" Array")]),t._v(" "),s("p",[t._v("在 JS 中 Array 的一些注意事项：")]),t._v(" "),s("ul",[s("li",[t._v("在一个 "),s("code",[t._v("array")]),t._v(" 值上使用 "),s("code",[t._v("delete")]),t._v(" 将会从这个 "),s("code",[t._v("array")]),t._v(" 上移出一个值槽，但是就算"),s("code",[t._v("delete")]),t._v("的是最后一个元素，它也不会更新 "),s("code",[t._v("length")]),t._v(" 的属性，所以要多加小心。")]),t._v(" "),s("li",[s("code",[t._v("array")]),t._v("也是对象，可以在它上面添加 "),s("code",[t._v("string")]),t._v(" 属性，但是这些属性不会计算在 "),s("code",[t._v("array")]),t._v(" 的 "),s("code",[t._v("length")]),t._v(" 中，但需要注意：如果一个可以被强制转换为 10 进制 "),s("code",[t._v("numver")]),t._v(" 的 "),s("code",[t._v("string")]),t._v("被用作键的话，它会认为你想使用 "),s("code",[t._v("number")]),t._v(" 索引而不是一个 "),s("code",[t._v("string")])])]),t._v(" "),s("p",[t._v("结论：一般来说，向 "),s("code",[t._v("array")]),t._v(" 添加 "),s("code",[t._v("string")]),t._v(" 属性不是一个好主意，最好使用 "),s("code",[t._v("object")]),t._v(" 来处理有键/属性形式的值，而将 array 专用于严格地数字索引的值。")]),t._v(" "),s("h3",{attrs:{id:"类-array-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类-array-对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 类 Array 对象")]),t._v(" "),s("p",[t._v("常见的类 array 对象：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("arguments")]),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"typeof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typeof","aria-hidden":"true"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),s("p",[s("code",[t._v("typeof")]),t._v("总是返回一个字符串，所以：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "string"')]),t._v("\n")])])]),s("p",[t._v("总结性的一句话："),s("code",[t._v("typeof")]),t._v("对于原始类型，除了 "),s("code",[t._v("null")]),t._v(" 都可以显示正确的类型；对于对象类型来说，除了函数都会显示 object。")]),t._v(" "),s("p",[t._v("注意点：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("typeof")]),t._v(" 作用于 "),s("code",[t._v("function")]),t._v(" 时，结果为 "),s("code",[t._v("function")]),t._v("，很容易认为 JS 中"),s("code",[t._v("function")]),t._v('是一直顶层的内建类型，然而它实际上是对象（object）的"子类型"。因此，一个函数也被称为"可调用对象"————一个拥有 [[Call]] 内部属性、允许被调用的对象。')]),t._v(" "),s("li",[t._v("当对一个未声明的变量使用 "),s("code",[t._v("typeof")]),t._v(" 时，"),s("code",[t._v("typeof")]),t._v(" 上的安全防卫机制在特定的情况下非常有用（防止抛出错误）。")])]),t._v(" "),s("h2",{attrs:{id:"instanceof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instanceof","aria-hidden":"true"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),s("p",[s("code",[t._v("instanceof")]),t._v("用于测试构造函数的 "),s("code",[t._v("prototype")]),t._v(" 属性是否出现在对象的原型链中的任何位置。")]),t._v(" "),s("p",[s("code",[t._v("Symbol.hasInstance")]),t._v("用于自定义判断某对象是否为某构造器的实例。即用于自定义 "),s("code",[t._v("instanceof")]),t._v(" 操作符在某个类上的行为。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyArray")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasInstance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("h2",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),s("p",[t._v("JS 中类型转换只有三种情况：")]),t._v(" "),s("ul",[s("li",[t._v("转换为布尔值")]),t._v(" "),s("li",[t._v("转换为数字")]),t._v(" "),s("li",[t._v("转换为字符串")])]),t._v(" "),s("p",[t._v("对象转换为原始类型时，先调用 "),s("code",[t._v("valueof()")]),t._v(" ，如果没有返回原始类型，再调用 "),s("code",[t._v("toString()")]),t._v("，如果两者都没有返回原始类型，就会报错。\n如果重写了"),s("code",[t._v("Symbol.toPrimitive")]),t._v("，就会直接调用该方法。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("Symbol.toPrimitive指将被调用的指定函数值的属性转换为相对应的原始值。如果定义后就不会再调用`valueof()`和`toString()`方法\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 3")]),t._v("\n")])])]),s("p",[t._v("注意点：在条件判断时，除了 undefined、null、false、NaN、 ''、 0、 -0，其他所有值都转为 true，包括所有对象。虽然 [] == false 的结果为 true，但是在 if 判断语句时 [] 依然会转为为 true")]),t._v(" "),s("h2",{attrs:{id:"四则运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四则运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 四则运算符")]),t._v(" "),s("ol",[s("li",[t._v("加法运算符：")])]),t._v(" "),s("ul",[s("li",[t._v("运算中其中一方为字符串，那么就会把另一方也转换为字符串")]),t._v(" "),s("li",[t._v("如果一方不是字符串或者数字，那么会将它转换为数字或者字符串")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("其他运算符:")])]),t._v(" "),s("ul",[s("li",[t._v("只要其中一方是数字，那么另一方就会被转为数字")])]),t._v(" "),s("h2",{attrs:{id:"比较运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 比较运算符")]),t._v(" "),s("ol",[s("li",[t._v("如果是对象，就通过 toPrimitive 转换对象")]),t._v(" "),s("li",[t._v("如果是字符串，就通过 unicode 字符索引来比较")])])])}),[],!1,null,null,null);a.default=n.exports}}]);