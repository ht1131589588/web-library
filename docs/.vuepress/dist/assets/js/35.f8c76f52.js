(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{294:function(t,o,_){"use strict";_.r(o);var v=_(28),r=Object(v.a)({},(function(){var t=this,o=t.$createElement,_=t._self._c||o;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"原型链"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原型链","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),_("ol",[_("li",[t._v("原型就是一个对象,并且这个对象中包含了很多函数。结论：对于 "),_("code",[t._v("obj")]),t._v(" 来说，可以通过 "),_("code",[t._v("__proto__")]),t._v(" 找到y一个原型对象, 在该对象中定义了很多函数让我们使用。")]),t._v(" "),_("li",[t._v("原型的 constructor 属性指向构造函数，构造函数又通过 prototype 属性指回原型，但是并不是所有函数都具有这个属性，Function.prototype.bind() 就没有这个属性。")]),t._v(" "),_("li",[t._v("原型链就是多个对象通过 "),_("strong",[t._v("proto")]),t._v(" 的方式连接了起来。为什么 obj 可以访问到 valueOf 函数，就是因为 obj 通过原型链找到了 valueOf 函数。")])]),t._v(" "),_("p",[t._v("总结：")]),t._v(" "),_("ul",[_("li",[t._v("Object 是所有对象的爸爸，所有对象都可以通过 "),_("strong",[t._v("proto")]),t._v(" 找到它")]),t._v(" "),_("li",[t._v("Function 是所有函数的爸爸，所有函数都可以通过 "),_("strong",[t._v("proto")]),t._v(" 找到它")]),t._v(" "),_("li",[t._v("Function.prototype 和 Object.prototype 是两个特殊的对象，他们由引擎来创建")]),t._v(" "),_("li",[t._v("除了以上两个特殊对象，其他对象都是通过构造器 new 出来的")]),t._v(" "),_("li",[t._v("函数的 prototype 是一个对象，也就是原型")]),t._v(" "),_("li",[t._v("对象的 "),_("strong",[t._v("proto")]),t._v(" 指向原型， "),_("strong",[t._v("proto")]),t._v(" 将对象和原型连接起来组成了原型链")])])])}),[],!1,null,null,null);o.default=r.exports}}]);